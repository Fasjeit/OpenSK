diff --git a/boards/nordic/nrf52dk_base/src/lib.rs b/boards/nordic/nrf52dk_base/src/lib.rs
index d391e455..21dbfffa 100644
--- a/boards/nordic/nrf52dk_base/src/lib.rs
+++ b/boards/nordic/nrf52dk_base/src/lib.rs
@@ -170,68 +170,68 @@ pub unsafe fn setup_board<I: nrf52::interrupt_service::InterruptService>(
     usb: &Option<&'static nrf52::usbd::Usbd<'static>>,
     chip: &'static nrf52::chip::NRF52<I>,
 ) {
-    // Make non-volatile memory writable and activate the reset button
-    let uicr = nrf52::uicr::Uicr::new();
-
-    // Check if we need to erase UICR memory to re-program it
-    // This only needs to be done when a bit needs to be flipped from 0 to 1.
-    let psel0_reset: u32 = uicr.get_psel0_reset_pin().map_or(0, |pin| pin as u32);
-    let psel1_reset: u32 = uicr.get_psel1_reset_pin().map_or(0, |pin| pin as u32);
-    let mut erase_uicr = ((!psel0_reset & (button_rst_pin as u32))
-        | (!psel1_reset & (button_rst_pin as u32))
-        | (!(uicr.get_vout() as u32) & (reg_vout as u32)))
-        != 0;
-
-    // Only enabling the NFC pin protection requires an erase.
-    if nfc_as_gpios {
-        erase_uicr |= !uicr.is_nfc_pins_protection_enabled();
-    }
-
-    if erase_uicr {
-        nrf52::nvmc::NVMC.erase_uicr();
-    }
-
-    nrf52::nvmc::NVMC.configure_writeable();
-    while !nrf52::nvmc::NVMC.is_ready() {}
-
-    let mut needs_soft_reset: bool = false;
-
-    // Configure reset pins
-    if uicr
-        .get_psel0_reset_pin()
-        .map_or(true, |pin| pin != button_rst_pin)
-    {
-        uicr.set_psel0_reset_pin(button_rst_pin);
-        while !nrf52::nvmc::NVMC.is_ready() {}
-        needs_soft_reset = true;
-    }
-    if uicr
-        .get_psel1_reset_pin()
-        .map_or(true, |pin| pin != button_rst_pin)
-    {
-        uicr.set_psel1_reset_pin(button_rst_pin);
-        while !nrf52::nvmc::NVMC.is_ready() {}
-        needs_soft_reset = true;
-    }
-
-    // Configure voltage regulator output
-    if uicr.get_vout() != reg_vout {
-        uicr.set_vout(reg_vout);
-        while !nrf52::nvmc::NVMC.is_ready() {}
-        needs_soft_reset = true;
-    }
-
-    // Check if we need to free the NFC pins for GPIO
-    if nfc_as_gpios {
-        uicr.set_nfc_pins_protection(true);
-        while !nrf52::nvmc::NVMC.is_ready() {}
-        needs_soft_reset = true;
-    }
-
-    // Any modification of UICR needs a soft reset for the changes to be taken into account.
-    if needs_soft_reset {
-        cortexm4::scb::reset();
-    }
+    // // Make non-volatile memory writable and activate the reset button
+    // let uicr = nrf52::uicr::Uicr::new();
+
+    // // Check if we need to erase UICR memory to re-program it
+    // // This only needs to be done when a bit needs to be flipped from 0 to 1.
+    // let psel0_reset: u32 = uicr.get_psel0_reset_pin().map_or(0, |pin| pin as u32);
+    // let psel1_reset: u32 = uicr.get_psel1_reset_pin().map_or(0, |pin| pin as u32);
+    // let mut erase_uicr = ((!psel0_reset & (button_rst_pin as u32))
+    //     | (!psel1_reset & (button_rst_pin as u32))
+    //     | (!(uicr.get_vout() as u32) & (reg_vout as u32)))
+    //     != 0;
+
+    // // Only enabling the NFC pin protection requires an erase.
+    // if nfc_as_gpios {
+    //     erase_uicr |= !uicr.is_nfc_pins_protection_enabled();
+    // }
+
+    // if erase_uicr {
+    //     nrf52::nvmc::NVMC.erase_uicr();
+    // }
+
+    // nrf52::nvmc::NVMC.configure_writeable();
+    // while !nrf52::nvmc::NVMC.is_ready() {}
+
+    // let mut needs_soft_reset: bool = false;
+
+    // // Configure reset pins
+    // if uicr
+    //     .get_psel0_reset_pin()
+    //     .map_or(true, |pin| pin != button_rst_pin)
+    // {
+    //     uicr.set_psel0_reset_pin(button_rst_pin);
+    //     while !nrf52::nvmc::NVMC.is_ready() {}
+    //     needs_soft_reset = true;
+    // }
+    // if uicr
+    //     .get_psel1_reset_pin()
+    //     .map_or(true, |pin| pin != button_rst_pin)
+    // {
+    //     uicr.set_psel1_reset_pin(button_rst_pin);
+    //     while !nrf52::nvmc::NVMC.is_ready() {}
+    //     needs_soft_reset = true;
+    // }
+
+    // // Configure voltage regulator output
+    // if uicr.get_vout() != reg_vout {
+    //     uicr.set_vout(reg_vout);
+    //     while !nrf52::nvmc::NVMC.is_ready() {}
+    //     needs_soft_reset = true;
+    // }
+
+    // // Check if we need to free the NFC pins for GPIO
+    // if nfc_as_gpios {
+    //     uicr.set_nfc_pins_protection(true);
+    //     while !nrf52::nvmc::NVMC.is_ready() {}
+    //     needs_soft_reset = true;
+    // }
+
+    // // Any modification of UICR needs a soft reset for the changes to be taken into account.
+    // if needs_soft_reset {
+    //     cortexm4::scb::reset();
+    // }
 
     // Create capabilities that the board needs to call certain protected kernel
     // functions.
